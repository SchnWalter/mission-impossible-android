#!/usr/bin/env python3
"""
MIA - Mission Impossible: Hardening Android for Security and Privacy

This project is a attempting to streamline the process of following Mike Perry's
Android hardening tutorial on the Tor blog:
    https://blog.torproject.org/blog/mission-impossible-hardening-android-security-and-privacy

Please keep in mind that this is experimental, and may not be functional at any
given moment. Also, it will likely wipe your Android device, and this is by
design!

Usage:
    mia clean
    mia definition create [--template=<template>] [--cpu=<cpu>] [<definition>]
    mia definition configure <definition>
    mia definition lock [--force-latest] <definition>
    mia definition dl-apps <definition>
    mia definition dl-os <definition>
    mia help <command>
    mia (-h | --help | --version)

Options:
    --template=<template>  The template to use. [default: mia-default]
    --cpu=<cpu>            The device CPU architecture. [default: armeabi]

    -v, --verbose          Spew out even more information than normal.
    -q, --quiet            Restrict output to warnings and errors.
    -h --help              Show this screen.
    --version              Show version.

Available commands:
    clean       Cleanup the current workspace.
    definition  Create a definition for a new update.zip file based on existing
                templates.
    help        Display detailed information about a certain command.

"""
__author__ = 'MIA Team'
__version__ = 'mia 0.0.1'

# Get the path of the mission-impossible-android project.
import os
ROOT = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

# Get the current directory.
WORKSPACE = os.getcwd()

# Add the script root the the PYTHONPATH environment variable.
import sys
sys.path.append(ROOT)

# Import docopt - the command-line interface description language.
# @see https://github.com/docopt/docopt/releases
from docopt import docopt

# Import custom helpers.
from mia.helpers.utils import *


def delegate_command():
    """
    Main command handler.
    """
    # Get the MIA handler singleton.
    handler = MiaHandler()

    if handler.args.get('clean', True):
        import mia.commands.clean
        mia.commands.clean.main()
    elif handler.args.get('help', True):
        import mia.commands.help
        mia.commands.help.main()
    elif handler.args.get('definition', True):
        import mia.commands.definition
        mia.commands.definition.main()
    else:
        print('Command not implemented yet!')


if __name__ == '__main__':
    # Read the arguments.
    args = docopt(__doc__, version=__version__)

    # Create the MiaHandler instance. It can be used in other modules in order
    # to retrieve arguments, configuration, a logger...
    MiaHandler(script_root=ROOT, workspace_dir=WORKSPACE, cli_args=args)

    # Execute the command.
    try:
        delegate_command()
    except KeyboardInterrupt:
        print("\n" + 'Exiting...')
        pass
